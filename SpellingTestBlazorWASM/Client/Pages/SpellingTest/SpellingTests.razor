@page "/spellingtests"
@using SpellingTestBlazor.Shared
@inject IJSRuntime js
@inject NavigationManager uriHelper
@inject HttpClient Http

<h1>Spelling Tests</h1>

<div class="form-group">
    <a class="btn btn-success" href="spellingtest/create"><i class="oi oi-plus"></i> Create New Test</a>
</div>
<br>

@if (_tests == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Test Name</th>
            </tr>
        </thead>
        <tbody>
            @foreach (SpellingTest test in _tests)
            {
                <tr>
                    <td>@test.TestName</td>
                    <td>
                        <a class="btn btn-success" href="spellingtest/edit/@test.Id">Edit</a>
                        <button class="btn btn-danger" @onclick="@(() => DeleteAsync(test.Id))">Delete</button>
                        <button class="btn btn-success" @onclick="@(() => NavigateToTest(test.Id))">Take Test</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IEnumerable<SpellingTest> _tests;

    protected override async Task OnInitializedAsync()
    {
        _tests = await Http.GetFromJsonAsync<IEnumerable<SpellingTest>>("api/SpellingTest/GetSpellingTests");
    }

    async Task DeleteAsync(Guid testId)
    {
        var dev = _tests.First(x => x.Id == testId);
        if (await js.InvokeAsync<bool>("confirm", $"Do you want to delete {dev.TestName}'s ({dev.Id}) Record?"))
        {
            await Http.DeleteAsync($"api/SpellingTest?testId={testId}");
            await OnInitializedAsync();
        }
    }

    void NavigateToTest(Guid testId)
    {
        uriHelper.NavigateTo($"taketest/{testId}");
    }


}